{"version":3,"sources":["src/colors.ts","src/changes.ts","src/placement.ts","src/player.ts","src/generate.ts","src/place.ts","src/init.ts","src/default.ts","page.ts"],"names":[],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAAA,IAAM,EAAc,CAC1B,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,eApJM,QAAA,YAAA;;ACaN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAbD,IAAA,EAAA,QAAA,YAEA,SAAS,IAED,OAAA,EAAY,YAAA,KAAK,MAAsB,IAAhB,KAAK,WAG9B,SAAU,EAAc,EAAmB,GAChD,YAAY,WACL,IAAA,EAAQ,IACd,EAAK,MAAM,gBAAkB,EAC7B,EAAK,MAAM,YAAc,GACvB;;ACiEH,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA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","file":"page.141d4e6e.js","sourceRoot":"..","sourcesContent":["export const namedColors = [\n\t'AliceBlue',\n\t'AntiqueWhite',\n\t'Aqua',\n\t'Aquamarine',\n\t'Azure',\n\t'Beige',\n\t'Bisque',\n\t'Black',\n\t'BlanchedAlmond',\n\t'Blue',\n\t'BlueViolet',\n\t'Brown',\n\t'BurlyWood',\n\t'CadetBlue',\n\t'Chartreuse',\n\t'Chocolate',\n\t'Coral',\n\t'CornflowerBlue',\n\t'Cornsilk',\n\t'Crimson',\n\t'Cyan',\n\t'DarkBlue',\n\t'DarkCyan',\n\t'DarkGoldenRod',\n\t'DarkGray',\n\t'DarkGrey',\n\t'DarkGreen',\n\t'DarkKhaki',\n\t'DarkMagenta',\n\t'DarkOliveGreen',\n\t'DarkOrange',\n\t'DarkOrchid',\n\t'DarkRed',\n\t'DarkSalmon',\n\t'DarkSeaGreen',\n\t'DarkSlateBlue',\n\t'DarkSlateGray',\n\t'DarkSlateGrey',\n\t'DarkTurquoise',\n\t'DarkViolet',\n\t'DeepPink',\n\t'DeepSkyBlue',\n\t'DimGray',\n\t'DimGrey',\n\t'DodgerBlue',\n\t'FireBrick',\n\t'FloralWhite',\n\t'ForestGreen',\n\t'Fuchsia',\n\t'Gainsboro',\n\t'GhostWhite',\n\t'Gold',\n\t'GoldenRod',\n\t'Gray',\n\t'Grey',\n\t'Green',\n\t'GreenYellow',\n\t'HoneyDew',\n\t'HotPink',\n\t'IndianRed',\n\t'Indigo',\n\t'Ivory',\n\t'Khaki',\n\t'Lavender',\n\t'LavenderBlush',\n\t'LawnGreen',\n\t'LemonChiffon',\n\t'LightBlue',\n\t'LightCoral',\n\t'LightCyan',\n\t'LightGoldenRodYellow',\n\t'LightGray',\n\t'LightGrey',\n\t'LightGreen',\n\t'LightPink',\n\t'LightSalmon',\n\t'LightSeaGreen',\n\t'LightSkyBlue',\n\t'LightSlateGray',\n\t'LightSlateGrey',\n\t'LightSteelBlue',\n\t'LightYellow',\n\t'Lime',\n\t'LimeGreen',\n\t'Linen',\n\t'Magenta',\n\t'Maroon',\n\t'MediumAquaMarine',\n\t'MediumBlue',\n\t'MediumOrchid',\n\t'MediumPurple',\n\t'MediumSeaGreen',\n\t'MediumSlateBlue',\n\t'MediumSpringGreen',\n\t'MediumTurquoise',\n\t'MediumVioletRed',\n\t'MidnightBlue',\n\t'MintCream',\n\t'MistyRose',\n\t'Moccasin',\n\t'NavajoWhite',\n\t'Navy',\n\t'OldLace',\n\t'Olive',\n\t'OliveDrab',\n\t'Orange',\n\t'OrangeRed',\n\t'Orchid',\n\t'PaleGoldenRod',\n\t'PaleGreen',\n\t'PaleTurquoise',\n\t'PaleVioletRed',\n\t'PapayaWhip',\n\t'PeachPuff',\n\t'Peru',\n\t'Pink',\n\t'Plum',\n\t'PowderBlue',\n\t'Purple',\n\t'RebeccaPurple',\n\t'Red',\n\t'RosyBrown',\n\t'RoyalBlue',\n\t'SaddleBrown',\n\t'Salmon',\n\t'SandyBrown',\n\t'SeaGreen',\n\t'SeaShell',\n\t'Sienna',\n\t'Silver',\n\t'SkyBlue',\n\t'SlateBlue',\n\t'SlateGray',\n\t'SlateGrey',\n\t'Snow',\n\t'SpringGreen',\n\t'SteelBlue',\n\t'Tan',\n\t'Teal',\n\t'Thistle',\n\t'Tomato',\n\t'Turquoise',\n\t'Violet',\n\t'Wheat',\n\t'White',\n\t'WhiteSmoke',\n\t'Yellow',\n\t'YellowGreen',\n];\n","import { namedColors } from './colors';\n\nfunction randomColor() {\n\t// There are 148 named HTML colors\n\treturn namedColors[Math.floor(Math.random() * 148)];\n}\n\nexport function ossilateColor(view: HTMLElement, interval: number) {\n\tsetInterval(() => {\n\t\tconst color = randomColor();\n\t\tview.style.backgroundColor = color;\n\t\tview.style.borderColor = color;\n\t}, interval);\n}\n","import { Player } from './player';\nimport { Surface, Placement, Size, Rect } from './types';\n\nexport function getRandomBoundedPlacement(\n\tsurface: Surface,\n\tmultiplier = 1\n): Placement {\n\treturn {\n\t\tx: Math.random() * surface.bounds.right * multiplier,\n\t\ty: Math.random() * surface.bounds.bottom * multiplier,\n\t};\n}\n\nexport function getBoundedCenter(\n\tsurface: Surface,\n\tobjectSize: Size\n): Placement {\n\treturn {\n\t\tx: (surface.bounds.right - surface.bounds.left - objectSize.width / 2) / 2,\n\t\ty: (surface.bounds.bottom - surface.bounds.top - objectSize.height) / 2,\n\t};\n}\n\nexport function getPlacementFromObject(object: Player, relativeToPage = false) {\n\tconst placement = Object.assign(object.placement);\n\tconst regexp = /translate\\((-?[\\d|\\.]*)\\w*,?\\s?(-?[\\d|\\.]*)\\w*\\)/;\n\tconst transform = object.view.style.transform;\n\tlet matches = regexp.exec(transform);\n\tif (!matches) {\n\t\treturn object.placement;\n\t}\n\tconst [_, x, y] = matches;\n\n\tif (x) {\n\t\ttry {\n\t\t\tplacement.x = Math.floor(parseFloat(x));\n\t\t} catch {\n\t\t\tconsole.log(`parsing x:${x} failed.`);\n\t\t}\n\t}\n\tif (y) {\n\t\ttry {\n\t\t\tplacement.y = Math.floor(parseFloat(y));\n\t\t} catch {\n\t\t\tconsole.log(`parsing y:${y} failed.`);\n\t\t}\n\t}\n\n\tif (relativeToPage) {\n\t\treturn {\n\t\t\tx: placement.x + object.origin.x,\n\t\t\ty: placement.y + object.origin.y,\n\t\t};\n\t}\n\n\treturn {\n\t\tx: placement.x,\n\t\ty: placement.y,\n\t};\n}\n\nexport function getPosition(gameView: HTMLElement): Placement {\n\tconst surfacePosition = gameView.getBoundingClientRect();\n\treturn {\n\t\tx: Math.round(surfacePosition.left),\n\t\ty: Math.round(surfacePosition.top),\n\t};\n}\n\nexport function getBounds(gameView: HTMLElement): Rect {\n\tconst raw = gameView.getBoundingClientRect();\n\treturn {\n\t\tleft: Math.round(raw.left),\n\t\tright: Math.round(raw.right),\n\t\tbottom: Math.round(raw.bottom),\n\t\ttop: Math.round(raw.top),\n\t};\n}\n","import { Place } from './place';\nimport { getPosition, getRandomBoundedPlacement } from './placement';\nimport {\n\tGamePiece,\n\tMoves,\n\tPlacement,\n\tPlayerConfig,\n\tSize,\n\tSurface,\n} from './types';\n\nconst defaultConfig = {\n\tspeed: 2,\n\tsize: {\n\t\theight: 48,\n\t\twidth: 48,\n\t},\n\tcolor: 'rgba(72, 61, 139, .25)',\n};\n\nlet staggerCount = 0;\n\nfunction getStaggerCounter() {\n\tconst stagger = staggerCount;\n\tstaggerCount++;\n\tif (staggerCount > 15) {\n\t\tstaggerCount = 0;\n\t}\n\treturn stagger;\n}\n\nexport class Player implements Moves, GamePiece {\n\tprivate _meandering = false;\n\tprivate _orbiting = false;\n\tprivate _meanderInterval: number;\n\tpublic view: HTMLElement;\n\tpublic origin: Placement;\n\tpublic size: Size;\n\tpublic speed: number;\n\tpublic _staggering: number;\n\n\tconstructor(\n\t\tpublic placement,\n\t\tpublic readonly surface: Surface,\n\t\tconfig: Partial<PlayerConfig> = defaultConfig\n\t) {\n\t\tconst extendedConfig: PlayerConfig = (config = {\n\t\t\t...defaultConfig,\n\t\t\t...config,\n\t\t});\n\t\tthis.size = extendedConfig.size;\n\t\tthis.speed = extendedConfig.speed;\n\t\tthis.view = document.createElement('div');\n\t\tthis.view.classList.add('player');\n\t\tthis.surface.view.appendChild(this.view);\n\t\tthis._staggering = getStaggerCounter();\n\t\tthis.view.style.backgroundColor = extendedConfig.color;\n\t\tstaggerCount++;\n\n\t\tthis.origin = getPosition(this.view);\n\n\t\tthis.move(placement);\n\t\tthis.view.style.width = `${this.size.width}px`;\n\t\tthis.view.style.height = `${this.size.height}px`;\n\t\tthis.view.style.transition = `all ${this.speed}s linear`;\n\t}\n\n\tpublic move(moveTo: Placement) {\n\t\tthis.fitToBounds(moveTo);\n\n\t\tconst transformedX = Math.round(moveTo.x - this.origin.x);\n\t\tconst transformedY = Math.round(moveTo.y - this.origin.y);\n\t\tthis.placement = {\n\t\t\tx: transformedX,\n\t\t\ty: transformedY,\n\t\t};\n\t\tthis.view.style.transform = `translate(${transformedX}px, ${transformedY}px)`;\n\t}\n\n\tpublic fitToBounds(moveTo: Placement) {\n\t\tconst realX = moveTo.x + this.surface.origin.x;\n\t\tconst realY = moveTo.y + this.surface.origin.y;\n\t\tmoveTo.x = Math.max(\n\t\t\tMath.min(this.surface.bounds.right - this.size.width, realX),\n\t\t\tthis.surface.bounds.left\n\t\t);\n\t\tmoveTo.y = Math.max(\n\t\t\tMath.min(this.surface.bounds.bottom - this.size.width, realY),\n\t\t\tthis.surface.bounds.top\n\t\t);\n\t}\n\n\tpublic meander(extremely: number = 1) {\n\t\tif (this._meandering) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._meanderInterval = setInterval(() => {\n\t\t\tthis.move(getRandomBoundedPlacement(this.surface, extremely));\n\t\t}, this.speed * 1000);\n\t}\n\n\tpublic stop() {\n\t\tthis._meandering = false;\n\t\tthis._orbiting = false;\n\t\tclearInterval(this._meanderInterval);\n\t}\n\n\tpublic orbit(\n\t\tobject: Place,\n\t\tdirection: 'clockwise' | 'counterclockwise',\n\t\tdistance = 44\n\t) {\n\t\tstaggerCount++;\n\t\tthis._meandering = false;\n\t\tthis._orbiting = true;\n\t\tthis.view.style.transform = ``;\n\t\tthis.view.style.transformOrigin = `${object.size.width + distance}px ${\n\t\t\tobject.size.height + distance\n\t\t}px`;\n\t\tthis.view.style.top = `${\n\t\t\tobject.placement.y - object.size.height / 2 - distance\n\t\t}px`;\n\t\tthis.view.style.left = `${\n\t\t\tobject.placement.x - object.size.width / 2 - distance\n\t\t}px`;\n\t\tthis.view.style.animation = `bouncer-orbit-${direction} ${\n\t\t\t8 + this._staggering\n\t\t}s linear infinite`;\n\t}\n}\n","import { getRandomBoundedPlacement } from './placement';\nimport { Surface } from './types';\nimport { Player } from './player';\nimport { Place } from './place';\n\nexport function generateBodies(\n\tsurface: Surface,\n\tplaces: Place[],\n\tamount: number = 1\n) {\n\tconst players: Player[] = [];\n\n\tfor (let i = 0; i < amount; i++) {\n\t\tconst size = i * Math.random() * 5;\n\t\tconst player = new Player(getRandomBoundedPlacement(surface), surface, {\n\t\t\tsize: {\n\t\t\t\theight: size,\n\t\t\t\twidth: size,\n\t\t\t},\n\t\t});\n\t\tplayers.push(player);\n\t\tconst direction = randomRotation();\n\t\tconst place = getRandomPlaceByCounter(places);\n\n\t\tif (i % 2 === 0) {\n\t\t\tplayer.orbit(place, direction, i * Math.random() * 25);\n\t\t} else {\n\t\t\tplayer.orbit(place, direction, i * Math.random() * 10);\n\t\t}\n\t}\n\treturn players;\n}\n\nexport function randomRotation() {\n\treturn Math.floor(Math.random() * 2) % 2 === 0\n\t\t? 'clockwise'\n\t\t: 'counterclockwise';\n}\n\nexport function getRandomPlaceByCounter(places: Place[]) {\n\tconst num = Math.floor(Math.random() * places.length);\n\treturn places[num];\n}\n","import { GamePiece, Placement, Surface, PlaceConfig, Size } from './types';\nimport { getPosition } from './placement';\n\nconst defaultConfig = {\n\tsize: {\n\t\theight: 48,\n\t\twidth: 48,\n\t},\n};\n\nexport class Place implements GamePiece {\n\tview: HTMLElement;\n\torigin: Placement;\n\tsize: Size;\n\n\tconstructor(\n\t\tsurface: Surface,\n\t\tpublic placement: Placement,\n\t\tpublic config: Partial<PlaceConfig> = defaultConfig\n\t) {\n\t\tconst extendedConfig: PlaceConfig = { ...defaultConfig, ...config };\n\t\tthis.size = extendedConfig.size;\n\t\tthis.view = document.createElement('div');\n\t\tthis.view.classList.add('place');\n\t\tsurface.view.appendChild(this.view);\n\n\t\tthis.origin = getPosition(this.view);\n\n\t\tthis.view.style.position = 'absolute';\n\n\t\tthis.view.style.top = `${placement.y}px`;\n\t\tthis.view.style.left = `${placement.x}px`;\n\n\t\tthis.view.style.width = `${this.size.width}px`;\n\t\tthis.view.style.height = `${this.size.height}px`;\n\t}\n\n\tget center() {\n\t\treturn {\n\t\t\tx: this.origin.x - this.size.width / 2,\n\t\t\ty: this.origin.y - this.size.height / 2,\n\t\t};\n\t}\n}\n","const stylesheet = `\n\t.bouncer-container {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tmax-width: 100%;\n\t\tmin-height: 100vh;\n\t\tposition: relative;\n\t\tbackground: white;\n\t\toverflow: hidden;\n\t\tbackground: indigo;\n\t\ttransition: all 1s linear;\n\t}\n\n\t.bouncer-container * {\n\t\tbox-sizing: border-box;\n\t\tborder-width: 0.5rem !important;\n\t\toutline-width: 0.5rem !important;\n\t}\n\n\t.player-1 {\n\t\tanimation-timing-function: cubic-bezier(0.17, 0.67, 0, 1.58) !important;\n\t}\n\n\t.player {\n\t\theight: 3rem;\n\t\twidth: 3rem;\n\t\tborder: 1px solid transparentize(slateblue, 0.75);\n\t\tbackground: transparentize(slateblue, 0.25);\n\t\toutline: 1px;\n\t\tposition: absolute;\n\t\ttransform-origin: center;\n\t\tborder-radius: 100%;\n\t}\n\n\t.place {\n\t\tborder: 1px solid transparentize(green, 0.75);\n\t\tbackground: transparentize(green, 0.25);\n\t\tborder-radius: 100%;\n\t\ttransition: all 1s linear;\n\t}\n\n\t@keyframes bouncer-orbit-clockwise {\n\t\t0% {\n\t\t\ttransform: rotate(0);\n\t\t}\n\t\t100% {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t@keyframes bouncer-orbit-counterclockwise {\n\t\t0% {\n\t\t\ttransform: rotate(0);\n\t\t}\n\t\t100% {\n\t\t\ttransform: rotate(-360deg);\n\t\t}\n\t}\n`;\n\nexport function init(defaultStyle: string = stylesheet) {\n\tconst styleTag = document.createElement('style');\n\tstyleTag.type = 'text/css';\n\tstyleTag.appendChild(document.createTextNode(stylesheet));\n\tdocument.head.appendChild(styleTag);\n}\n","import { ossilateColor } from './changes';\nimport { generateBodies, randomRotation } from './generate';\nimport { Place } from './place';\nimport {\n\tgetBoundedCenter,\n\tgetRandomBoundedPlacement,\n\tgetBounds,\n\tgetPosition,\n} from './placement';\nimport { Player } from './player';\nimport { Surface } from './types';\nimport { init } from './init';\n\nexport function playDefault(gameView: HTMLElement) {\n\tinit();\n\n\tconst surface: Surface = {\n\t\tbounds: getBounds(gameView),\n\t\torigin: getPosition(gameView),\n\t\tview: gameView,\n\t};\n\n\tconst player1Size = Math.floor(Math.random() * 126) + 8;\n\n\tconst player1 = new Player(getRandomBoundedPlacement(surface), surface, {\n\t\tsize: {\n\t\t\theight: player1Size,\n\t\t\twidth: player1Size,\n\t\t},\n\t});\n\n\tplayer1.view.classList.add('player-1');\n\tplayer1.meander();\n\n\tconst centeredPlace = new Place(\n\t\tsurface,\n\t\tgetBoundedCenter(surface, { height: 88, width: 88 }),\n\t\t{ size: { height: 96, width: 96 } }\n\t);\n\n\tconst places = [\n\t\tnew Place(surface, getRandomBoundedPlacement(surface)),\n\t\tnew Place(surface, getRandomBoundedPlacement(surface)),\n\t\tnew Place(surface, getRandomBoundedPlacement(surface)),\n\t\tnew Place(surface, getRandomBoundedPlacement(surface)),\n\t\tnew Place(surface, getRandomBoundedPlacement(surface), {\n\t\t\tsize: { height: 192, width: 192 },\n\t\t}),\n\t\tcenteredPlace,\n\t];\n\n\tplaces.forEach((place, i) => ossilateColor(place.view, (i + 1) * 2000));\n\n\tossilateColor(player1.view, 1000);\n\tossilateColor(surface.view, 16000);\n\n\tconst movingBodies = generateBodies(surface, places, 48);\n\n\tfluctuationRotations();\n\tfluctuateOrbits();\n\n\tfunction fluctuationRotations() {\n\t\tlet random = Math.floor(Math.random() * 3);\n\n\t\tsetInterval(() => {\n\t\t\tplayer1.move({ x: 0, y: 0 });\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (random % 2 === 0) {\n\t\t\t\t\tplayer1.orbit(centeredPlace, randomRotation(), 44);\n\t\t\t\t} else if (random % 3 === 0) {\n\t\t\t\t\tplayer1.meander();\n\t\t\t\t} else {\n\t\t\t\t\tplayer1.orbit(\n\t\t\t\t\t\tplaces[Math.floor(Math.random() * 5)],\n\t\t\t\t\t\trandomRotation(),\n\t\t\t\t\t\tMath.floor(Math.random() * 88)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\trandom++;\n\t\t\t}, 1000);\n\t\t}, 8000);\n\t}\n\n\tfunction fluctuateOrbits() {\n\t\tsetInterval(() => {\n\t\t\tmovingBodies.forEach((player: Player, i) => {\n\t\t\t\tconst direction =\n\t\t\t\t\tMath.floor(Math.random() * 2) % 2 === 0\n\t\t\t\t\t\t? 'clockwise'\n\t\t\t\t\t\t: 'counterclockwise';\n\t\t\t\t// player.move(player.origin);\n\t\t\t\tplayer.orbit(centeredPlace, direction, i * Math.random() * 25);\n\t\t\t});\n\t\t}, 12000);\n\t}\n}\n","import { playDefault } from './src/default';\n\nconst gameView = document.querySelector('.bouncer-container') as HTMLElement;\nplayDefault(gameView);\n"]}